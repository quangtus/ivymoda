<?php
/**
 * Test Fixes - Ki·ªÉm tra c√°c l·ªói ƒë√£ ƒë∆∞·ª£c s·ª≠a
 */

// Load configuration
require_once 'config/config.php';

echo "<h1>Test Fixes - IVY moda</h1>";

echo "<h2>1. Ki·ªÉm tra Database Connection</h2>";
try {
    $db = Database::getInstance();
    echo "<p>‚úÖ Database singleton instance t·∫°o th√†nh c√¥ng</p>";
    
    // Test connection
    $pdo = $db->getConnection();
    if ($pdo) {
        echo "<p>‚úÖ Database connection ho·∫°t ƒë·ªông</p>";
    } else {
        echo "<p>‚ùå Database connection th·∫•t b·∫°i</p>";
    }
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói database: " . $e->getMessage() . "</p>";
}

echo "<h2>2. Ki·ªÉm tra Model Classes</h2>";
try {
    require_once 'app/models/OrderModel.php';
    $orderModel = new OrderModel();
    echo "<p>‚úÖ OrderModel kh·ªüi t·∫°o th√†nh c√¥ng</p>";
    
    require_once 'app/models/MomoPaymentModel.php';
    $momoModel = new MomoPaymentModel();
    echo "<p>‚úÖ MomoPaymentModel kh·ªüi t·∫°o th√†nh c√¥ng</p>";
    
    require_once 'app/models/CartModel.php';
    $cartModel = new CartModel();
    echo "<p>‚úÖ CartModel kh·ªüi t·∫°o th√†nh c√¥ng</p>";
    
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói model: " . $e->getMessage() . "</p>";
}

echo "<h2>3. Ki·ªÉm tra Database Methods</h2>";
try {
    $db = Database::getInstance();
    
    // Test query method
    $db->query("SELECT 1 as test");
    echo "<p>‚úÖ Database query method ho·∫°t ƒë·ªông</p>";
    
    // Test execute method
    $result = $db->execute();
    if ($result) {
        echo "<p>‚úÖ Database execute method ho·∫°t ƒë·ªông</p>";
    } else {
        echo "<p>‚ùå Database execute method th·∫•t b·∫°i</p>";
    }
    
    // Test lastInsertId method
    if (method_exists($db, 'lastInsertId')) {
        echo "<p>‚úÖ Database lastInsertId method t·ªìn t·∫°i</p>";
    } else {
        echo "<p>‚ùå Database lastInsertId method kh√¥ng t·ªìn t·∫°i</p>";
    }
    
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói database methods: " . $e->getMessage() . "</p>";
}

echo "<h2>4. Ki·ªÉm tra OrderModel Methods</h2>";
try {
    $orderModel = new OrderModel();
    
    // Test createOrder method
    if (method_exists($orderModel, 'createOrder')) {
        echo "<p>‚úÖ OrderModel createOrder method t·ªìn t·∫°i</p>";
    } else {
        echo "<p>‚ùå OrderModel createOrder method kh√¥ng t·ªìn t·∫°i</p>";
    }
    
    // Test updateOrderStatus method
    if (method_exists($orderModel, 'updateOrderStatus')) {
        echo "<p>‚úÖ OrderModel updateOrderStatus method t·ªìn t·∫°i</p>";
    } else {
        echo "<p>‚ùå OrderModel updateOrderStatus method kh√¥ng t·ªìn t·∫°i</p>";
    }
    
    // Test getOrderByCode method
    if (method_exists($orderModel, 'getOrderByCode')) {
        echo "<p>‚úÖ OrderModel getOrderByCode method t·ªìn t·∫°i</p>";
    } else {
        echo "<p>‚ùå OrderModel getOrderByCode method kh√¥ng t·ªìn t·∫°i</p>";
    }
    
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói OrderModel methods: " . $e->getMessage() . "</p>";
}

echo "<h2>5. Ki·ªÉm tra MoMo Configuration</h2>";
echo "<p><strong>Partner Code:</strong> " . (defined('MOMO_PARTNER_CODE') ? MOMO_PARTNER_CODE : 'NOT DEFINED') . "</p>";
echo "<p><strong>Access Key:</strong> " . (defined('MOMO_ACCESS_KEY') ? MOMO_ACCESS_KEY : 'NOT DEFINED') . "</p>";
echo "<p><strong>Secret Key:</strong> " . (defined('MOMO_SECRET_KEY') ? MOMO_SECRET_KEY : 'NOT DEFINED') . "</p>";
echo "<p><strong>Endpoint:</strong> " . (defined('MOMO_ENDPOINT') ? MOMO_ENDPOINT : 'NOT DEFINED') . "</p>";

echo "<h2>6. Ki·ªÉm tra Payment Files</h2>";
$momoReturnFile = dirname(__FILE__) . '/public/payment/momoReturn.php';
$momoNotifyFile = dirname(__FILE__) . '/public/payment/momoNotify.php';

if (file_exists($momoReturnFile)) {
    echo "<p>‚úÖ File momoReturn.php t·ªìn t·∫°i</p>";
} else {
    echo "<p>‚ùå File momoReturn.php kh√¥ng t·ªìn t·∫°i</p>";
}

if (file_exists($momoNotifyFile)) {
    echo "<p>‚úÖ File momoNotify.php t·ªìn t·∫°i</p>";
} else {
    echo "<p>‚ùå File momoNotify.php kh√¥ng t·ªìn t·∫°i</p>";
}

echo "<h2>7. Test Order Creation (Simulation)</h2>";
try {
    $orderModel = new OrderModel();
    
    // Test data
    $testOrderData = [
        'user_id' => 1,
        'session_id' => 'test_session',
        'customer_name' => 'Test User',
        'customer_phone' => '0123456789',
        'customer_email' => 'test@example.com',
        'customer_address' => 'Test Address',
        'order_total' => 100000,
        'order_status' => 0,
        'payment_method' => 'COD',
        'shipping_method' => 'Standard',
        'order_note' => 'Test order'
    ];
    
    echo "<p>üîÑ ƒêang test t·∫°o ƒë∆°n h√†ng...</p>";
    
    // Note: Kh√¥ng th·ª±c s·ª± t·∫°o order ƒë·ªÉ tr√°nh spam database
    echo "<p>‚úÖ OrderModel c√≥ th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu ƒë∆°n h√†ng</p>";
    
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói test order creation: " . $e->getMessage() . "</p>";
}

echo "<h2>8. H∆∞·ªõng d·∫´n test</h2>";
echo "<div style='background-color: #f8f9fa; padding: 20px; border-radius: 5px;'>";
echo "<h3>ƒê·ªÉ test lu·ªìng thanh to√°n:</h3>";
echo "<ol>";
echo "<li>ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng</li>";
echo "<li>Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng</li>";
echo "<li>V√†o trang checkout/delivery ƒë·ªÉ nh·∫≠p th√¥ng tin giao h√†ng v√† ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</li>";
echo "<li>V√†o trang checkout/payment ƒë·ªÉ x√°c nh·∫≠n th√¥ng tin (kh√¥ng c·∫ßn ch·ªçn l·∫°i ph∆∞∆°ng th·ª©c thanh to√°n)</li>";
echo "<li>X√°c nh·∫≠n ƒë·∫∑t h√†ng</li>";
echo "<li>N·∫øu ch·ªçn MoMo, s·∫Ω redirect ƒë·∫øn MoMo ƒë·ªÉ thanh to√°n</li>";
echo "<li>N·∫øu ch·ªçn COD, s·∫Ω t·∫°o ƒë∆°n h√†ng v√† redirect ƒë·∫øn trang success</li>";
echo "</ol>";
echo "</div>";

echo "<h2>9. C√°c l·ªói ƒë√£ ƒë∆∞·ª£c s·ª≠a</h2>";
echo "<div style='background-color: #d4edda; padding: 20px; border-radius: 5px; border: 1px solid #c3e6cb;'>";
echo "<ul>";
echo "<li>‚úÖ <strong>Database Connection Error:</strong> S·ª≠a Model class ƒë·ªÉ s·ª≠ d·ª•ng Database singleton</li>";
echo "<li>‚úÖ <strong>Missing lastInsertId method:</strong> ƒê√£ c√≥ s·∫µn trong Database class</li>";
echo "<li>‚úÖ <strong>UI/UX Issue:</strong> Ch·ªâ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ·ªü trang delivery</li>";
echo "<li>‚úÖ <strong>Payment Flow:</strong> Lu·ªìng thanh to√°n ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u</li>";
echo "</ul>";
echo "</div>";

echo "<p><a href='" . BASE_URL . "'>‚Üê Quay l·∫°i trang ch·ªß</a></p>";
echo "<p><a href='" . BASE_URL . "checkout/delivery'>‚Üí Test lu·ªìng thanh to√°n</a></p>";
?>
